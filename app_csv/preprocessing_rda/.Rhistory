sdoh_df$violent.crime <- sdoh_df$violent.crime / 10
sdoh_df$violent.crime
sdoh_df$violent.crime <- sdoh_df$violent.crime / 10
sdoh_df$violent.crime <- sdoh_df$violent.crime * 10
sdoh_df$pcp <- sdoh_df$pcp * 10000
sdoh_df$mhp <- sdoh_df$mhp * 10000
sdoh_df$hiv <- sdoh_df$hiv / 10
metrics_df = data.frame(category=character(), sub-category=character(), metric=character(), higher_better=logical())
metrics_df = data.frame(category=character(), sub-category=character(), metric=character(), higher.better=logical())
metrics_df = data.frame(category=character(), subcategory=character(), metric=character(), higher.better=logical())
metrics_df
metrics_df$category = c("Social Determinants")*15
metrics_df$category = rep("Social Determinants", 15)
insertRows(metrics_df, 22)
add_row(metrics_df)
metrics_df = data.frame(category=character(), subcategory=character(), metric=character(), higher.better=logical())
for (i in 1:22) { add_rows(metrics_df) }
for (i in 1:22) { metrics_df = add_row(metrics_df) }
metrics_df
metrics_df$category <- c(rep("Social Determinants", 15), rep("Health Outcomes", 7))
metrics_df$category
metrics_df$subcategory <- c(rep("Economic Stability", 2), rep("Neighborhood / Environment", 3), rep("Education", 2), rep("Food", 3), rep("Community / Social", 2), rep("Healthcare System", 3), rep("General Health", 5), rep("Disease Specific", 2))
metrics_df$subcategory
metrics_df = data.frame(category=character(), subcategory=character(), metric.id=character(), metric.name=character(), higher.better=logical())
for (i in 1:22) { metrics_df = add_row(metrics_df) }
metrics_df$category <- c(rep("Social Determinants", 15), rep("Health Outcomes", 7))
metrics_df$subcategory <- c(rep("Economic Stability", 2), rep("Neighborhood / Environment", 3), rep("Education", 2), rep("Food", 3), rep("Community / Social", 2), rep("Healthcare System", 3), rep("General Health", 5), rep("Disease Specific", 2))
metrics_df$metric.id <- c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv")
metrics_df$metric.id
metrics_df
metrics_df$metric.name <- c("Unemployment", "Income Inequality", "Severe Housing Problems (%)", "Violent Crimes per 10,000 People", "Overcrowding", "High School Graduation Rate", "College Rate", "Food Environment Index", "Food Insecurity", "Limited Access to Healthy Foods (%)", "Social Associations per 10,000 People", "% of People Not Proficient in English", "Primary Care Providers per 10,000 People", "Mental Health Providers per 10,000 People", "Flu Vaccines (%)", "Poor Physical Health Days per Month", "Poor Mental Health Days per Month", "Obesity Rate (%)", "Preventable Hospital Stays per 10,000 People", "Life Expectancy", "Diabetes Prevalence (%)", "HIV Prevalence (%)")
metrics_df$higher.better <- c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)
metrics_df = data.frame(category=character(), subcategory=character(), metric.id=character(), metric.name=character(), higher.better=logical(), natl.avg=numeric())
for (i in 1:22) { metrics_df = add_row(metrics_df) }
metrics_df$category <- c(rep("Social Determinants", 15), rep("Health Outcomes", 7))
metrics_df$subcategory <- c(rep("Economic Stability", 2), rep("Neighborhood / Environment", 3), rep("Education", 2), rep("Food", 3), rep("Community / Social", 2), rep("Healthcare System", 3), rep("General Health", 5), rep("Disease Specific", 2))
metrics_df$metric.id <- c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv")
metrics_df$metric.name <- c("Unemployment", "Income Inequality", "Severe Housing Problems (%)", "Violent Crimes per 10,000 People", "Overcrowding", "High School Graduation Rate", "College Rate", "Food Environment Index", "Food Insecurity", "Limited Access to Healthy Foods (%)", "Social Associations per 10,000 People", "% of People Not Proficient in English", "Primary Care Providers per 10,000 People", "Mental Health Providers per 10,000 People", "Flu Vaccines (%)", "Poor Physical Health Days per Month", "Poor Mental Health Days per Month", "Obesity Rate (%)", "Preventable Hospital Stays per 10,000 People", "Life Expectancy", "Diabetes Prevalence (%)", "HIV Prevalence (%)")
metrics_df$higher.better <- c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)
metrics_df
metrics_df$metric.id
sdoh_df$unemployment * sdoh_df$population
(sdoh_df$unemployment * sdoh_df$population) / sum(sdoh_df$population)
sum(sdoh_df$unemployment * sdoh_df$population) / sum(sdoh_df$population)
missing_ratio = colSums(is.na(sdoh_df)) / nrow(sdoh_df)
missing_ratio
unemp_df = sdoh_df[!is.na(sdoh_df$unemployment)]
unemp_df = sdoh_df[!is.na(sdoh_df$unemployment), ]
nrow(unemp_df)
nrow(sdoh_df)
0.000313087 * 3194
sum(unemp_df$unemployment * unemp_df$population) / sum(unemp_df$population)
metrics_df[4, 5]
str(metrics_df)
metrics_df[4, 'natl.avg']
metrics_df[, 'natl.avg']
metric_specific_df = sdoh_df[!is.na(sdoh_df[, metrics_df[1, 'metric.id']])]
metric_specific_df = sdoh_df[!is.na(sdoh_df[, metrics_df[1, 'metric.id']]), ]
nrow(metric_specific_df)
nrow(sdoh_df)
metrics_df[1, 'natl.avg'] <- sum(metric_specific_df[, metrics_df[1, 'metric.id']] * metric_specific_df[ , 'population']) / sum(metric_specific_df[ , 'population'])
metrics_df
for (i in 1:22) {
metric_specific_df = sdoh_df[!is.na(sdoh_df[, metrics_df[i, 'metric.id']]), ]
metrics_df[i, 'natl.avg'] <- sum(metric_specific_df[, metrics_df[i, 'metric.id']] * metric_specific_df[ , 'population']) / sum(metric_specific_df[ , 'population'])
}
missing_ratio = colSums(is.na(sdoh_df)) / nrow(sdoh_df)
missing_ratio
sdoh_df
metrics_df
sdoh_df$prevent.hosp.stays <- sdoh_df$prevent.hosp.stays / 10000
for (i in 1:22) {
metric_specific_df = sdoh_df[!is.na(sdoh_df[, metrics_df[i, 'metric.id']]), ]
metrics_df[i, 'natl.avg'] <- sum(metric_specific_df[, metrics_df[i, 'metric.id']] * metric_specific_df[ , 'population']) / sum(metric_specific_df[ , 'population'])
}
?write.csv
library(leaflet)
shiny::runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
library(shinydashboard)
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
getwd()
counties_df <- read.csv('../data/sdoh_counties,csv')
counties_df <- read.csv('../data/sdoh_counties.csv')
str(counties_df)
metrics_df <- read.csv('../data/metric_table.csv')
str(metrics_df)
metrics_df
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
library(DT)
leaflet() %>% addTiles() %>% addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
leaflet() %>% addTiles() %>% addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
?map
install.packages('maps')
install.packages('maps')
library(maps)
?map
leaflet(Andrew)
Andrew
data(Andrew)
?leaflet
leaflet_usa <- leaflet() %>% addTiles()
leaflet_usa
colStates <- map("state", fill=TRUE, plot=FALSE, region=unique(sdoh_df$state))
colStates
sdoh_df$state
leaflet_usa %>% addPolygons(data=colStates, fillColor=heat.colors(6, alpha=1), stroke=FALSE)
unique(sdoh_df$state)
getData("GADM", country="usa", level=2)
library(raster)
getData("GADM", country="usa", level=2)
USA <- getData("GADM", country="usa", level=2)
temp <- merge(USA, sdoh_df, by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
str(temp)
sdoh_df_metric <- sdoh_df %>% select(., state, county, unemployment)
library(dplyr)
sdoh_df_metric <- sdoh_df %>% select(., state, county, unemployment)
library(raster)
?select
sdoh_df_metric <- sdoh_df[, c("state", "county", "unemployment")]
str(sdoh_df_metric)
temp <- merge(USA, sdoh_df_metric, by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
library(viridis)
mypal <- colorNumeric(palette="viridis", domain=temp$unemployment, na.color="grey")
sdoh_df_metric <- sdoh_df[, c("state", "county", "unemployment")] %>% filter(., !is.na(unemployment))
nrow(sdoh_df_metric)
temp <- merge(USA, sdoh_df_metric, by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
mypal <- colorNumeric(palette="viridis", domain=temp$unemployment, na.color="grey")
temp$unemployment
sdoh_df_metric <- sdoh_df[, c("state", "county", "unemployment")] %>% filter(., !is.na(unemployment))
sdoh_df$unemployment
sdoh_df_metric$unemployment
?gsub
sdoh_df$county
sdoh_df$county <- gsub(" County", "", sdoh_df$county)
sdoh_df$county
sdoh_df_metric <- sdoh_df[, c("state", "county", "unemployment")] %>% filter(., !is.na(unemployment))
temp <- merge(USA, sdoh_df_metric, by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
temp$unemployment
sdoh_df_metric$unemployment
sdoh_df_metric$county
abbr2state("MN")
install.packages('openintro')
library(openintro)
abbr2state("MN")
sdoh_df_metric <- sdoh_df[, c("state", "county", "unemployment")] %>% filter(., !is.na(unemployment)) %>% mutate(., state=abbr2state(state))
sdoh_df_metric
temp <- merge(USA, sdoh_df_metric, by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
unique(sdoh_df_metric)
?unique
temp <- merge(USA, unique(sdoh_df_metric), by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
unique(sdoh_df[list(state, county), nomatch=0])
?distinct
sdoh_df %>% distinct(., state, county, .keep_all=TRUE)
nrow(sdoh_df %>% distinct(., state, county, .keep_all=TRUE))
nrow(sdoh_df)
sdoh_df_metric <- sdoh_df[, c("state", "county", "unemployment")] %>% filter(., !is.na(unemployment)) %>% mutate(., state=abbr2state(state))
temp <- merge(USA, sdoh_df_metric, by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
sdoh_df <- read.csv('../data/sdoh_counties.csv')
sdoh_df_metric <- sdoh_df[, c("state", "county", "unemployment")] %>% filter(., !is.na(unemployment)) %>% mutate(., state=abbr2state(state))
temp <- merge(USA, sdoh_df_metric, by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
temp$unemployment
mypal <- colorNumeric(palette="viridis", domain=temp$unemployment, na.color="grey")
leaflet() %>% addProviderTiles("Esri.WorldStreetMap") %>% addPolygons(data=sdoh_df_metric, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.3, fillColor= ~mypal(temp$unemployment), popup = paste("State: ", temp$NAME_1, "<br>", "County: ", temp$NAME_2, "<br>", "Unemployment: ", temp$unemployment, "<br>")) %>% addLegend(position="bottomLeft", pal=mypal, values=temp$unemployment, title="Unemployment", opacity=1)
leaflet() %>% addProviderTiles("Esri.WorldStreetMap") %>% addPolygons(data=USA, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.3, fillColor= ~mypal(temp$unemployment), popup = paste("State: ", temp$NAME_1, "<br>", "County: ", temp$NAME_2, "<br>", "Unemployment: ", temp$unemployment, "<br>")) %>% addLegend(position="bottomLeft", pal=mypal, values=temp$unemployment, title="Unemployment", opacity=1)
leaflet() %>% addProviderTiles("Esri.WorldStreetMap") %>% addPolygons(data=USA, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.3, fillColor= ~mypal(temp$unemployment), popup = paste("State: ", temp$NAME_1, "<br>", "County: ", temp$NAME_2, "<br>", "Unemployment: ", temp$unemployment, "<br>")) %>% addLegend(position="bottomleft", pal=mypal, values=temp$unemployment, title="Unemployment", opacity=1)
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
str(sdoh_df)
metrics_df <- read.csv('../data/metric_table.csv')
str(metrics_df)
unique(metrics_df$category)
metrics_df[category == "Health Outcomes"]
metrics_df[category == "Health Outcomes", ]
metrics_df[metrics_df$category == "Health Outcomes", ]
metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory == "General Health", ]
metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory == "General Health", metric.name]
metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory == "General Health", metrics$dfmetric.name]
metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory == "General Health", metrics_df$metric.name]
metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory == "General Health", metric.name]
metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory == "General Health", 'metric.name']
metrics_df['category' == "Health Outcomes" & 'subcategory' == "General Health", 'metric.name']
metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory == "General Health", 'metric.name']
metrics_df[metrics_df$category == "Health Outcomes", 'subcategory']
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
str(sdoh_df)
sdoh_df %>% group_by(., state)
?summarise_all
sdoh_df %>% group_by(., state) %>% summarise_all(., weighted.mean(., population))
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), mean, na.rm=TRUE)
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), weighted.mean(., population), na.rm=TRUE)
sdoh_df %>% group_by(., state) %>% summarise(., weighted.mean(unemployment, population))
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), funs(weighted.mean(., w=population)), na.rm=TRUE)
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), list(weighted.mean(., w=population)), na.rm=TRUE)
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), list(~ weighted.mean(., w=population)), na.rm=TRUE)
?summarise_at
?na.rm
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), list(~ weighted.mean(., w=population)))
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), list(~ weighted.mean(., w=population)), na.rm=TRUE)
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), list(~ weighted.mean(., w=population, na.rm=TRUE)))
sdoh_df %>% filter(., state=="AK") %>% select(., violent.crime, population)
sdoh_df %>% filter(., state=="AK")[, c("violent.crime", "population")]
sdoh_df %>% filter(., state=="AK")[, list("violent.crime", "population")]
sdoh_df %>% filter(., state=="AK") %>% dplyr::select(., violent.crime, population)
sdoh_df %>% group_by(., state) %>% summarise_at(c("unemployment", "income.ineq", "housing.severe", "violent.crime", "overcrowding", "high.school.grad", "college", "food.env.index", "food.insecurity", "healthy.foods", "social.assoc", "english.notprof", "pcp", "mhp", "flu.vaccine", "poor.physical.health", "poor.mental.health", "obesity", "prevent.hosp.stays", "life.expectancy", "diabetes", "hiv"), list(~ weighted.mean(., w=population, na.rm=TRUE)))
states_df <- read.csv('../data/sdoh_states.csv')
str(states_df)
str(counties_df)
sdoh_df[, "unemployment"]
counties_df[, c("state", "county", "unemployment")] %>% filter(., !is.na("unemployment"))
nrow(counties_df[, c("state", "county", "unemployment")] %>% filter(., !is.na("unemployment")))
nrow(counties_df)
nrow(counties_df[, c("state", "county", "violent.crime")] %>% filter(., !is.na("violent.crime")))
nrow(counties_df[, c("state", "county", "violent.crime")] %>% filter(., !is.na(violent.crime)))
nrow(counties_df[, c("state", "county", "violent.crime")][!is.na("violent.crime"),]
)
?na.omit
nrow(na.omit(counties_df[, c("state", "county", "violent.crime")])
)
na.omit(counties_df[, c("state", "county", "violent.crime")])
USA <- getData("GADM", country="usa", level=2)
sdoh_df_metric <- na.omit(counties_df[, c("state", "county", "violent.crime")]) %>%
mutate(., state=abbr2state(state))
sdoh_df_metric
temp <- merge(USA, sdoh_df_metric <- by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
temp <- merge(USA, sdoh_df_metric,
by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
temp$violent.crime
mypal <- colorNumeric(palette="viridis", domain=temp[, metric_selected], na.color="grey")
mypal <- colorNumeric(palette="viridis", domain=temp[, 'violent.crime'], na.color="grey")
sdoh_df_metric <- na.omit(counties_df[, c("state", "county", metric_selected)]) %>%
mutate(., state=abbr2state(state))
sdoh_df_metric <- na.omit(counties_df[, c("state", "county", "violent.crime")]) %>%
mutate(., state=abbr2state(state))
nrow(sdoh_df_metric)
temp <- merge(USA, sdoh_df_metric,
by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
nrow(temp$violent.crime)
temp$violent.crime
count(temp$violent.crime)
mypal <- colorNumeric(palette="viridis", domain=temp[, 'violent.crime'], na.color="grey")
temp[, 'violent.crime']
class(temp)
temp$violent.crime
temp %>% select(., violent.crime)
temp %>% dplyr::select(., violent.crime)
colnames(temp)[colnames(temp)=="violent.crime"] <- "value"
colnames(temp)
rename(temp, value=violent.crime)
temp$violent.crime
`$`(temp, "violent.crime")
mypal <- colorNumeric(palette="viridis", domain=`$`(temp, metric_selected), na.color="grey")
mypal <- colorNumeric(palette="viridis", domain=`$`(temp, "violent.crime"), na.color="grey")
leaflet() %>% addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data=USA, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.3,
fillColor= ~mypal(`$`(temp, "violent.crime")),
popup = paste("State: ", temp$NAME_1, "<br>", "County: ", temp$NAME_2, "<br>", "Unemployment: ", `$`(temp, "violent.crime"), "<br>")) %>%
addLegend(position="bottomleft", pal=mypal, values=`$`(temp, "violent.crime"), title="Unemployment", opacity=1)
USA <- getData("GADM", country="usa", level=1)
USA$NAME_1
USA_state <- getData("GADM", country="usa", level=1)
detail_selected="State"
detail_selected
sdoh_df_metric <- ifelse(detail_selected=="State",
na.omit(states_df[, c("state", metric_selected)]) %>%
mutate(., state=abbr2state(state)),
na.omit(counties_df[, c("state", "county", metric_selected)]) %>%
mutate(., state=abbr2state(state)))
metric_selected="violent.crime"
sdoh_df_metric <- ifelse(detail_selected=="State",
na.omit(states_df[, c("state", metric_selected)]) %>%
mutate(., state=abbr2state(state)),
na.omit(counties_df[, c("state", "county", metric_selected)]) %>%
mutate(., state=abbr2state(state)))
temp <- merge(ifelse(detail_selected=="State", USA_state, USA_county), sdoh_df_metric,
by.x=ifelse(detail_selected=="State", c("NAME_1"), c("NAME_1", "NAME_2")),
by.y=ifelse(detail_selected=="State", c("state"), c("state", "county")), all.x=TRUE)
temp <- merge(ifelse(detail_selected=="State", USA_state, USA_county), sdoh_df_metric,
by.x=ifelse(detail_selected=="State", "NAME_1", c("NAME_1", "NAME_2")),
by.y=ifelse(detail_selected=="State", "state", c("state", "county")), all.x=TRUE)
detail_selected
temp <- merge(USA_state, sdoh_df_metric, by.x="NAME_1", by.y="state", all.x=TRUE)
sdoh_df_metric
states_df
states_df[, c("state", metric_selected)]
states_df[, c("state", metric_selected)] %>% rename(., state=abbr2state(state))
states_df[, c("state", metric_selected)] %>% mutate(., state=abbr2state(state))
sdoh_df_metric
sdoh_df_metric <- ifelse(detail_selected=="State",
(na.omit(states_df[, c("state", metric_selected)]) %>%
mutate(., state=abbr2state(state))),
(na.omit(counties_df[, c("state", "county", metric_selected)]) %>%
mutate(., state=abbr2state(state))))
sdoh_df_metric
na.omit(states_df[, c("state", metric_selected)]) %>%
mutate(., state=abbr2state(state))
na.omit(states_df[, c("state", metric_selected)])
sdoh_df_metric <- ifelse(detail_selected=="State",
na.omit(states_df[, c("state", metric_selected)] %>%
mutate(., state=abbr2state(state))),
na.omit(counties_df[, c("state", "county", metric_selected)] %>%
mutate(., state=abbr2state(state))))
sdoh_df_metric
metric_selected
na.omit(states_df[, c("state", metric_selected)])
states_df[, c("state", metric_selected)]
sdoh_df_metric_state <- na.omit(states_df[, c("state", metric_selected)] %>%
mutate(., state=abbr2state(state)))
sdoh_df_metric_county <- na.omit(counties_df[, c("state", "county", metric_selected)] %>%
mutate(., state=abbr2state(state)))
sdoh_df_metric_state
temp <- merge(ifelse(detail_selected=="State", USA_state, USA_county),
ifelse(detail_selected=="State", sdoh_df_metric_state, sdoh_df_metric_county),
by.x=ifelse(detail_selected=="State", "NAME_1", c("NAME_1", "NAME_2")),
by.y=ifelse(detail_selected=="State", "state", c("state", "county")), all.x=TRUE)
temp <- merge(USA_state, sdoh_df_metric_state, by.x="NAME_1", by.y="State", all.x=TRUE)
temp <- merge(USA_state, sdoh_df_metric_state, by.x="NAME_1", by.y="state", all.x=TRUE)
if (detail_selected=="State") {
temp <- merge(USA_state, sdoh_df_metric_state, by.x="NAME_1", by.y="state", all.x=TRUE)
} else {
temp <- merge(USA_county, sdoh_df_metric_county,
by.x=c("NAME_1", "NAME_2"), by.y=c("state", "county"), all.x=TRUE)
}
mypal <- colorNumeric(palette="viridis", domain=`$`(temp, metric_selected), na.color="grey")
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data=USA, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.4,
fillColor= ~mypal(`$`(temp, metric_selected)),
popup = paste("State: ", temp$NAME_1, "<br>", "County: ", temp$NAME_2, "<br>", "Unemployment: ", `$`(temp, metric_selected), "<br>")) %>%
addLegend(position="bottomleft", pal=mypal, values=`$`(temp, metric_selected), title="Unemployment", opacity=1)
leaflet() %>%
addProviderTiels("OpenStreetMap.Mapnik") %>%
addPolygons(data=USA_state, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.4,
fillColor= ~mypal(`$`(temp, metric_selected)),
popup = paste("State: ", temp$NAME_1, "<br>", "County: ", "<br>", "Unemployment: ", `$`(temp, metric_selected), "<br>")) %>%
addLegend(position="bottomleft", pal=mypal, values=`$`(temp, metric_selected), title="Unemployment", opacity=1)
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data=USA_state, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.4,
fillColor= ~mypal(`$`(temp, metric_selected)),
popup = paste("State: ", temp$NAME_1, "<br>", "County: ", "<br>", "Unemployment: ", `$`(temp, metric_selected), "<br>")) %>%
addLegend(position="bottomleft", pal=mypal, values=`$`(temp, metric_selected), title="Unemployment", opacity=1)
temp$violent.crime
mypal
`$`(temp, metric_selected)
metric_selected
`$`(temp, "violent.crime")
metric_selected
`$`(temp, metric_selected)
metric_selected
mypal <- colorNumeric(palette="viridis", domain=`$`(temp, metric_selected), na.color="grey")
`$`(temp, metric_selected)
temp$violent.crime
temp[["violent.crime"]]
temp[[metric_selected]]
mypal <- colorNumeric(palette="viridis", domain=temp[[metric_selected]], na.color="grey")
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(data=USA_state, stroke=FALSE, smoothFactor=0.2, fillOpacity=0.4,
fillColor= ~mypal(temp[[metric_selected]]),
popup = paste("State: ", temp$NAME_1, "<br>", "County: ", "<br>", "Unemployment: ", temp[[metric_selected]], "<br>")) %>%
addLegend(position="bottomleft", pal=mypal, values=temp[[metric_selected]], title="Unemployment", opacity=1)
metrics_df
metrics_df[metrics_df$metric.name == "High School Graduation Rate", metric.id]
metrics_df[metrics_df$metric.name == "High School Graduation Rate", "metric.id"]
metric_selected_new <- metrics_df[metrics_df$metric.name == "High School Graduation Rate", "metric.id"]
metric_selected_new
states_df[, c("state", metric_selected_new)]
states_df[, c("state", "high.school.grad")]
metric_selected_new <- metrics_df[metrics_df$metric.name == "High School Graduation Rate"]
metric_selected_new
metric_selected_new <- metrics_df[metrics_df$metric.name == "High School Graduation Rate", ]
metric_selected_new
metric_selected_new[["metric.id"]]
metric_selected_new$metric.id
as.character(metric_selected_new <- metrics_df[metrics_df$metric.name == "High School Graduation Rate", "metric.id"])
metric_selected_new <- as.character(metrics_df[metrics_df$metric.name == "High School Graduation Rate", "metric.id"])
metric_selected_new
states_df[, c("state", metric_selected_new)]
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp()
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
states_df
states_df[, c("state", "income.ineq")]
states_df[, c("state", "income.ineq")] %>% mutate(., state=abbr2state(state))
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp()
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
leaflet() %>% addProviderTiles("OpenStreetMap.Mapnik")
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
LETTERS[1:6]
?removeShape
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
unique(metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory=="General")
unique(metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory=="General"])
metrics_df
unique(metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory=="General Health"])
unique(metrics_df[metrics_df$category == "Health Outcomes" & metrics_df$subcategory=="General Health", "metric.name"])
?clearControls
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
states_df[, c("state", "poor.phys.health")]
str(states_df)
states_df[, c("state", "poor.physical.health")]
states_df[, c("state", "poor.physical.health")] %>% mutate(., state=abbr2state(as.character(state)))
as.character(metrics_df[metrics_df$metric.name == "Poor Physical Health Days", "metric.id"])
as.character(metrics_df[metrics_df$metric.name == "Poor Physical Health Days per Month", "metric.id"])
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
sdoh_df_metric_state <- na.omit(states_df[, c("state", metric_selected_new)])
sdoh_df_metric_state$state <- na.omit(abbr2state(as.character(sdoh_df_metric_state$state)))
sdoh_df_metric_state$state <- abbr2state(as.character(sdoh_df_metric_state$state))
sdoh_df_metric_state
sdoh_df_metric_state <- na.omit(sdoh_df_metric_state)
sdoh_df_metric_state
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp()
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
?round
temp[['unemployment']]
round(temp[['unemployment']], 3)
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
library(googleVis)
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]
as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"])
c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))
counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))]
gvisScatterChart(counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))])
scatter <- gvisScatterChart(counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))])
plot(scatter)
scatter <- gvisScatterChart(na.omit(counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))]))
plot(scatter)
na.omit(counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))])
nrow(na.omit(counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))]))
nrow(counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))])
scatter <- gvisScatterChart(na.omit(counties_df[, c(as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"]), as.character(metrics_df[metrics_df$metric.name=="Poor Physical Health Days per Month", "metric.id"]))]))
plot(scatter)
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"])
states_df[,as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"])]
states_df[[,as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"])]]
states_df[,as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id"])]
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
states_df[,as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id", drop=FALSE])]
states_df[,as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id",]), drop=FALSE]
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
states_df[,as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id",]), drop=FALSE]
max(states_df[,as.character(metrics_df[metrics_df$metric.name=="Unemployment", "metric.id",]), drop=FALSE])
metrics_df$natl.avg[metrics_df$metrics.name == "Unemployment"]
metrics_df$metrics.name == "Unemployment"
metrics_df$metrics.name
metrics_df
metrics_df$natl.avg[metrics_df$metric.name == "Unemployment"]
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
states_df$state
min_value = min(states_df[,as.character(metrics_df[metrics_df$metric.name == "Unemployment", "metric.id"]), drop=FALSE])
min_value
min_state <- states_df$state[states_df[, "Unemployment"] == min_value]
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='kobzajj', token='F9E3E4BD908C8A0512B8E9A9A5FB57D0', secret='RvH8Ix50mDiVyrRVMcmdxHOtTx36TsuPn+r+vnu+')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
runApp('~/NYCDSA/Projects/ShinyApp/county-level-sdoh-exploration/SDOHApp')
